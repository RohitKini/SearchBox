{"version":3,"sources":["Component/SearchComponent.js","App.js","serviceWorker.js","index.js"],"names":["SearchComponent","props","searchValueChanged","event","changedvalue","target","value","pattern","RegExp","finalSearchResult","SearchResultCal","searchkey","dataset","forEach","indexkey","filter","singleitem","test","toString","toLowerCase","map","matchitem","concat","console","log","setState","searchResult","state","this","cssClass","cssStyle","className","list","type","onChange","style","id","item","key","React","Component","defaultProps","App","name","width","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAOMA,G,kBAKL,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KAMPC,mBAAqB,SAACC,GAErB,IAAMC,EAAeD,EAAME,OAAOC,MAE5BC,EAAU,IAAIC,OAAJ,WAAeJ,IAE3BK,EAAoB,GACpBC,EAAkB,GAPS,EASA,EAAKT,MAA5BU,EATuB,EASvBA,UAAWC,EATY,EASZA,QAGnBD,EAAUE,SAAQ,SAACC,GAKlBJ,GAJAA,EAAkBE,EAAQG,QAAO,SAACC,GACjC,OAAOT,EAAQU,KAAKD,EAAWF,GAAUI,WAAWC,mBAGnBC,KAAI,SAACC,GACtC,OAAOA,EAAUP,MAIlBL,EAAoBA,EAAkBa,OAAOZ,MAGzB,KAAjBN,IACHK,EAAoB,IAGrBc,QAAQC,IAAIf,GAEZ,EAAKgB,SAAS,CAAEC,aAAcjB,KApC9B,EAAKkB,MAAQ,CACZD,aAAc,IAHG,E,sEA0CT,IACDA,EAAiBE,KAAKD,MAAtBD,aADA,EAEuBE,KAAK3B,MAA5B4B,EAFA,EAEAA,SAAUC,EAFV,EAEUA,SAElB,OACC,yBAAKC,UAAWF,GACf,2BACCG,KAAK,cACLC,KAAK,OACLC,SAAUN,KAAK1B,mBACfiC,MAAOL,IAGR,8BAAUM,GAAG,eACXV,EAAaN,KAAI,SAACiB,GAAD,OACjB,4BAAQC,IAAKD,EAAM/B,MAAO+B,GACxBA,Y,GA/DsBE,IAAMC,YA+EpCxC,EAAgByC,aAAe,CAC9BZ,SAAU,GACVC,SAAU,IAEI9B,Q,MCtDA0C,MA/Bf,WAiBC,OACC,yBAAKX,UAAU,OACd,kBAAC,EAAD,CACCnB,QAnBe,CACjB,CAAEwB,GAAI,EAAGO,KAAM,SACf,CAAEP,GAAI,EAAGO,KAAM,WACf,CAAEP,GAAI,EAAGO,KAAM,cACf,CAAEP,GAAI,EAAGO,KAAM,WACf,CAAEP,GAAI,EAAGO,KAAM,SACf,CAAEP,GAAI,EAAGO,KAAM,QACf,CAAEP,GAAI,EAAGO,KAAM,QACf,CAAEP,GAAI,EAAGO,KAAM,WACf,CAAEP,GAAI,EAAGO,KAAM,SACf,CAAEP,GAAI,GAAIO,KAAM,SAChB,CAAEP,GAAI,GAAIO,KAAM,WASdhC,UANiB,CAAC,KAAM,QAOxBmB,SAAU,CACTc,MAAQ,MACRC,OAAQ,YCjBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.783ae8a3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./component.css\";\nimport PropTypes from \"prop-types\";\n\n/**\n * search class\n */\nclass SearchComponent extends React.Component {\n\t/**\n\t * constructor\n\t * @param {*} props\n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tsearchResult: []\n\t\t};\n\t}\n\n\tsearchValueChanged = (event) => {\n\t\t// console.log(event.target.value)\n\t\tconst changedvalue = event.target.value;\n\n\t\tconst pattern = new RegExp(`^${changedvalue}`);\n\n\t\tlet finalSearchResult = [];\n\t\tlet SearchResultCal = [];\n\n\t\tconst { searchkey, dataset } = this.props;\n\n\t\t// eslint-disable-next-line react/prop-types\n\t\tsearchkey.forEach((indexkey) => {\n\t\t\tSearchResultCal = dataset.filter((singleitem) => {\n\t\t\t\treturn pattern.test(singleitem[indexkey].toString().toLowerCase());\n\t\t\t});\n\n\t\t\tSearchResultCal = SearchResultCal.map((matchitem) => {\n\t\t\t\treturn matchitem[indexkey];\n\t\t\t});\n\n\t\t\t// console.log(SearchResultCal);\n\t\t\tfinalSearchResult = finalSearchResult.concat(SearchResultCal);\n\t\t});\n\n\t\tif (changedvalue === \"\") {\n\t\t\tfinalSearchResult = [];\n\t\t}\n\n\t\tconsole.log(finalSearchResult);\n\n\t\tthis.setState({ searchResult: finalSearchResult });\n\t};\n\n\t// eslint-disable-next-line require-jsdoc\n\trender() {\n\t\tconst { searchResult } = this.state;\n\t\tconst { cssClass, cssStyle } = this.props;\n\t\t// console.log(searchValue);\n\t\treturn (\n\t\t\t<div className={cssClass} >\n\t\t\t\t<input\n\t\t\t\t\tlist=\"suggest-box\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tonChange={this.searchValueChanged}\n\t\t\t\t\tstyle={cssStyle}\n\t\t\t\t/>\n\n\t\t\t\t<datalist id=\"suggest-box\">\n\t\t\t\t\t{searchResult.map((item) => (\n\t\t\t\t\t\t<option key={item} value={item}>\n\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</datalist>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nSearchComponent.propTypes = {\n\tdataset  : PropTypes.arrayOf(PropTypes.objectOf).isRequired,\n\tsearchkey: PropTypes.PropTypes.arrayOf(PropTypes.string).isRequired,\n\tcssClass : PropTypes.string,\n\tcssStyle : PropTypes.string\n};\n\nSearchComponent.defaultProps = {\n\tcssClass: \"\",\n\tcssStyle: \"\"\n};\nexport default SearchComponent;\n","/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport SearchComponent from \"./Component/SearchComponent\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst nameArray = [\n\t\t{ id: 1, name: \"rohit\" },\n\t\t{ id: 2, name: \"kailash\" },\n\t\t{ id: 3, name: \"prathamesh\" },\n\t\t{ id: 4, name: \"apporva\" },\n\t\t{ id: 5, name: \"minar\" },\n\t\t{ id: 6, name: \"amey\" },\n\t\t{ id: 7, name: \"amar\" },\n\t\t{ id: 8, name: \"samidha\" },\n\t\t{ id: 9, name: \"swati\" },\n\t\t{ id: 10, name: \"tanvi\" },\n\t\t{ id: 11, name: \"ankita\" }\n\t];\n\n\tconst searchIndex = [\"id\", \"name\"];\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<SearchComponent\n\t\t\t\tdataset={nameArray}\n\t\t\t\tsearchkey={searchIndex}\n\t\t\t\tcssStyle={{\n\t\t\t\t\twidth : \"30%\",\n\t\t\t\t\theight: \"30px\"\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}